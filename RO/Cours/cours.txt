# Cours de Recherche Opérationnelle (MIF19)
by Stéphane BONNEVAY, Gérald GAVIN

----Cours du 30/10---

Modélisation (programmation linéaire)
variables :
-x_1
-x_2

Contraintes
- 5x_2 + 6_x2 =< 6000
- x_1 + 2x_2 =< 1500
- limite x_ =< 800

Marges :
x_1 × 5000 + x_2×4500 à maximiser

graphiquement, on représente les droites avec les constraintes sur x_1 et x_2, et on prend l'un des sommet/segments du polygone des contraintes (formé par les deux droites)

--------------------

modélisation du sac à dos:
n variables
x_i = 1 si l'objet dans le sac à dos
x_i = 0 si l'objet n'y est pas
							n			n
Problème à resoudre P : max ∑ u_i x_i | ∑ w_i x_i =< W	x_i∈ {0,1}
						   i=1		   i=1

Possibilité de scorer les objets, leur donner une valeur (rapport utilité/poids)

Front de Paretto -> optimisation multiobjectifs.

méthode gloutonne (greedy) : méthode qui ne remet pas en cause les choix faits à chaque étape de l'algorithme

-------------------------
x_1.5
x_2

taille totale :
4(108 ×40 + 125×60 + 100×70) = 150x + 200y

150 = 70+40+40 = 
200 = 2*60+2*40 = 2*70+60 = 5*40 =

#1 = 70+40+40

#2 = 60+60+40+40
#3 = 70+70+60
#4 = 40+40+40+40+40

50*#1 + 50*#3
=> 100*70 + 100*40 + 50*60

---------------
x_ij = 1 si l'employé j execute la tache i et 0 sinon

un employé ne peut exécuter plus d'une tache : ∑ x_ij ≤ 1, ∀j
											  i=1
______________________________
La théorie des graphes

____________________________________________________________
Cours du 31/10

Partie Graphe Classique

Notations :
-Un graphe G = (X, U, L)
	X = ensemble des sommets
	U = ensemble des arcs (U⊆ X²)
	L = fonction de pondértions des arcs (U → R)
|X| = n
|U| = m

Des façons de représenter un graphe :
-La matrice d'adjacence. On met un 1 dans la cas ij lorsqu'il y a un arc entre les sommets i et j. On peut remplacer le 1 par la pondération s'il y en a une. Tm la taille memoire. Tm = O(n²) => ∃c | Tm ≤ c.n² ; Tm = θ(n²) => c1 n² ≤ Tm ≤ c2.n²
-Listes d'adjacences. Tm = O(n²) = O(n⁸). Tm = O(m+n) avec m ⊆ n², ce qui est une amélioration

Le calcul de la somme des successeurs, qui dépend de la structure de donnée, se fait en complexité :
-O(n²) pour les matrices d'adjacences
-O(m+n) pour les listes d'adjacences

Définition d'un graphe Fortement connexe : le graphe a un seule composante fortement connexe. Pour tout couple de point, il existe un chemin entre eux. Il est possible de décomposer n'importe quel graphe en un ensemble de composantes fortement connexes.

Définition formelle d'une relation fortement connexe :
Deux sommet i et j sont reliés par la relation R_FC si
	-∃ un chemin entre i et j
	-∃ un chemin entre j et i
R_FC est une relation d'équivalence ?

Les composantes fortement connexes sont les classes d'équivalences de R_FC
·Réflexivité : i R_FC i
·Symétrie : i R_FC j => j R_FC i
·Transitivité i R_FC j et j R_FC k => i R_FC k

Définition formelle d'une relation connexe :
Deux sommet i et j sont reliés par la relation R_C si	
	-∃ une chaine entre i et j
R_C est une relation d'équivalence ?
Les composantes connexes sont les classes d'équivalence de R_C


______________________________________________________________
Penser à récuper le dernier cours de RO de mercredi 5/11

______________________________________________________________
Cours du 7/11

Parcours en largeur (G, s):
Utilisation d'une file.

//Initialisation
Pour chaque sommet u ∈ S[G]
	d[u] <- ∞
	Pi[u] <- nul
d[s] <- 0
Enfile(Fifo, s)

Tant que Fifo ≠ ø
	u <- tête(Fifo)
	pour chaque successeur vide de u
		si d[v] <- d[u] + 1
		Pi[v] <- u
		Enfile(Fifo, v)
	Défile(Fifo)

Pi est le "père de", permettant de savoir par ou on est passé pour découvrir chaque sommet


