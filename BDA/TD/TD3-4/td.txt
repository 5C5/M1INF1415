TD BDAV 3 & 4 Map/Reduce
--------------------------
# Exercice 1 analyse et extension du problème word count
## 1. & 2.

Mapper 1 :				Combiner Reducer 1 (t ≤ "f")
Doc 1 -> (appreciate,1)		--->(appreciate, [1]) 	--> (appreciate, 1)
	  -> (the, 1)	-> Reducer 2			  
	  -> (fold, 1)	-> Reducer 2
Doc 2 -> (cata, 1)			--->(cata, [1]) 		--> (cata, 1)
	  -> (equals, 1)		--->(equals, [1])		--> (equals, 1)
	  -> (fold, 1)
Mapper 2 :					 Reducer 2 (t > "f")
Doc 3 -> (fold, 1)			--->(fold, [1, 1, 1, 1]) -> (fold, 4)
	  -> (the, 1)			--->(the, [1, 1])		--> (the, 2)
	  -> (fold, 1)	--> Reducer 2

Emit(mot, décompte)

## 3.
MAP(docid a, doc d)
	mots <- {}
	for all term t ∈ doc d do
		if t ∈ mots then
			mots[t] += 1
		else
			mots[t] = 1
		end
	end
	for t ∈ mot.keys do
		EMIT(t, mots[t])
	end
end MAP

var map = function(){
	var local = {};
	var context = this.content.split(//);
	for(var i = 0, n = content.length; i < n; i++){
		if(local[content[i]])
			local[content[i]]++;
		else
			local[content[i]]= 1;
	}
	for(var key in local){
		emit(key, local[key]);
}
## 4
Le résultat envoyé eu niveau du reducer 2 est (fold, [1, 1, 2])

## 5
INITIALIZE
MAP(Doc1, "___")
MAP(Doc2, "___")
CLOSE

Dans le close, on sait qu'on a fini de parcourir les MAP (on a compté les occurences de chaque document).

INITIALIZE
	mots <- {}
end INITIALIZE
CLOSE
	for t ∈ mot.keys do
		EMIT(t, mots[t])
	end
end CLOSE

## 6
Utilisation de table de hashage

## 7

Au lieu de renvoyer (mot, 1), on renvoie (mot, docid)

MAPPER1
Doc1 -> (appreciate, doc1)
	 -> (the, doc1)
	 -> (fold, doc1)
Doc2 -> (cata, doc2)
	 -> (equals, doc2)
	 -> (fold, doc2)
MAPPER2
Doc3 -> (fold, doc3)
	 -> (the, doc3)

Le pseudo code correspondant :
MAP(docid id, doc d) :
	sent <- {}
	for t ∈ d
		if not t ∈ sent then
			EMIT(t, id)
			sent.insert(t)
		end
	end
end MAP
REDUCE(term t, docs [d1, d2, ...]
	l <- {}
	for d ∈ [d1, d2, ...] do
		l += "," + d
	end
	l = l.substr(1)	//On enlève la première virgule
	EMIT(t, l)
END REDUCE

# Exercice 2
## 1
REDUCE (term t, vals [v1, v2, ...]) :
	sum <- 0
	nbr <- 0
	for v ∈ [v1,v2 ...]
		sum += v
		nbr += 1
	end
	EMIT(t, sum/nbr)
end REDUCE

## 2
Les combiners font de la répartition entre les Mappeurs et les reducers, pour parraléliser les taches de ces derniers.
REDUCE (term t, vals [(s1,n1), (s2,n2), ...]) :
	sum <- 0
	nbr <- 0
	for (s, n) ∈ [(s1, n1),(s2, ...]
		sum += s
		nbr += n
	end
	EMIT(t, sum/nbr)
end REDUCE

COMBINER (term t, [(s1, n1), (s2, n2), ...])
	nb <- 0
	sum <- 0
	for (s, n) ∈ [(s, n), .....]
		nb += n
		sum += s
	end
	EMIT(id, (sum, nb))
end COMBINER


# Exercice 3
rappels :
	++ : concaténation 
	(+) aggregag sur 2 valeurs

## 3.1

(++) : [α]×[α] ->  [α]
	map : ((K1×V1) -> [(K2×V2)]) -> [(K1×V1)] -> [[K2×V2]]		Le vrai type de map : (α -> β) -> [α] -> [β]
	red : (V2×V2 -> V2) -> ([V2] -> V2)

## 3.2
(x(+)y)(+)z = (+) (y (+) z)
= (red((+))[x] (+) red((+))[y]) (+) red((+))[z]
=(red((+))([x] ++ [y]))(+) red((+))[z]
=(red((+))(([x] ++ [y]) ++ [z])
=red((+))([x] ++ ([y] ++ [z]))
=red((+))[x] (+) (red((+))([y] ++ [z]))
=x (+) (red((+)) [y] (+) red((+)))[z]
= x (+) (y (+) z)

preuve détaillée 
On suppose ++ commutatif
x (+) y
= red((+))[x] (+) red((+))[y]
= red((+))([x] ++ [y])
= red((+))([y] ++ [x])
= red((+)) [y] (+) red((+)) [x]

On suppose ++ idempotent
(x (+= y) (+) y
= red((+)) (([x] ++ [y]) ++ [y])
= red((+))([x] ++ [y])
= x (+) y

g o red(+): L -> g(red((+))(L))
red((×)) o map : L -> red((×))(map(g)(L))
g(red(+)[x] = g(x)
			= red((×))([g(x)])
			= red((×))(map(g)[x])

g(red((+))(xS ++ yS))
= g(red((+)) (xS) (+) red((+))(yS))
= g(red((+)) (xS)) (×) g(red((+))(yS))
par récurence sur xS et yS
= red((×))(map(g)(xS)) (×) red((×))(map(g)(yS))
= red((×))(map(g)(xS) ++ map(g)(yS))
= red((×))(map(g)(xS ++ yS))
					L

# Exercice 4
## 4.1
map(r, t)
	if(t.A < 10)
		emit(r, t)

reduce(r, ts)
	return ts[0]

## 4.2
map(r, t)
	emit({A:t.A, B:t.B}, {A:t.A, B:t.B})

reduce(r, ts)
	return r

## 
SELECT A, B
FROM R
INTERSECT
SELECT X AS A, Y AS B
FROM S

-> 
map(r, t)
	if(REL(r) = "R")
		emit({a;t.A, B:t.B}, "R")
	else
		emit({A:t.X, B:t.Y}, "S")
reduce(r, ts)
	if(ts.contains("R") && ts.contains("S"))
		return r;
	else
		return null;

## Jointure
map(r, t)
	if(REL(r) = "R")
		emit({a;t.A, B:t.B}, "R")
	else
		emit({A:t.X, B:t.Y}, "S")
reduce(r, ts)
	if(ts.contains("R") && ts.contains("S"))
		return r;
	else
		return null;


