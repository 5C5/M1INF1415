Cours de Calucl et Complexité

Les corrections sont authorisées!

Cours du 11/09/2014

JFLAP : plateforme de test d'automate, de gramR, etc (cg Google).


Classifier des langages (rationnels, algébriques et récursifs), des automates associés et des gramR les engendrant.
Le décidabilité et la complexité en dépendent.


Automate finis déterministes :
-Simulation d'une machine très simple :
	-mémorisation d'un état
	-programme sous forme de graphe étiquetté indiquant les transitions possibles
-Cette machine lit un mot en entrée
-ce mot décrit une suite d'action et progresse d'état en état, jusqu'a lecture du mot.
-Et dit s'il fait partir d'un langage donné, après avoir atteint un état final.

Un automate déterministe fini est le quintuplet :
-K ensemble fini non vide d'état
-Epsilon : alphabet (ensemble non vide de lettres)
-delta : fonction de transistion K x Epsilon -> K
	ð(q, sigma) =q'


Machines de Turing :
Une machine de Turing est constituée 
-d'un contrôle (ensemble finis d'état et de transitions
-d'un ruban infini à droite
-d'une tête sur le riban qui peut lire et écrire et qui peut se déplacer dans les deux directions d'un caractère à la fois.

A chque étape, en fonction de l'état courant et du symbole courant, la machine :
-change d'état,
-écrit un symbole à l'emplacement courant,
-déplace le tête d'une position à droite ou à gauche.

Initialement la machine est dans un état initial (sic)

Le symbole qui désigne le blanc (#) n'appartient pas à l'alphabet, mais peut être lu.
Pour simplifier l'écriture des configurations, on introduit une notation abbréviée sous la forme : (état courant, contenu du ruban où le symbole courant est souligné)

Ainsi, la config (q, e, a, bcdf) s'écrit (q, _a_ bcdf)  oui, le a est souligné (je peut pas le faire en ascii).

/!\ Je passe en notation latex pour la suite

Soit une machine de Turinf M=(K, \Sigma, \Gamma, \delta, q_0) et deux configurations (q_1, w_1, a_1, u_1) et (q_2, w_2, a_2, u_2). On dit que (q_1, w_1, a_1, u_1) conduit à (q_2, w_2, a_2, u_2) en une étape ssi voir démonstration.
On note cela (q_1, w_1, a_1, u_1) \Tcouché_M (q_2, w_2, a_2, u_2)

\delta : une fonction partielle : pour chaque doublet (etat, caractère) de la fonction, on a une ou zéro image (etat, caractère, direction D|G). Si elle n'était pas partielle, cela signifierai que pour chaque duet (etat, caractère), il y aurait un traitement, et la machine ne s'arreterait jamais.

Une machine augmentée avec des états finaux devient un sextuplet M = (K, \Sigma, \Gamma, \delta, q_0, F). On y rajoute F, l'ensemble de états finaux.
Contrairement aux AEF, il n'est pas obligatoire de lire entièrement le ruban. Quand la machine s'arrete, on regarde lé réponse.

Pour savoir si un mot est validé, on regarde dans quel état on est quand le symbole s'arrete.

Le langage accepté par une machine de Turing est Turing-Acceptable ou récursivement énumérable.

Si la machine de Turing s'arrête sur toutes les entrées possibles (c'est à dire pour tous les mots w, w \appartien L ou \n'appartient pas L), alors le langage est dit Turing-décidable ou récursif. On dit que M semi-décide L, ou encore M accepte L.

Les fonctions pouvant être calculés par une machine de Turing sont dites Turing-calculables.

Les fonctions de N dans N. f(I^n) = I^f(n) pour tout n \appartenant à N

Pour des machines + complexes, on utilise des machines de Turing comme des modules ou des sous-routines.

Exemple de combinaison de machine de Turing.
Les machines qui remplacent un symbole.
·Une machine pour chaque symbole de l'alphabet \Gamma.


___________________________________________________________
Cours du 18/09/2014

Notes to self:
configuration : (q, w, a, u)
-q est le symbole utilisé pour les etats de l'automate.
-a le symbole courant de \Sigma
-w la partie a gauche du symbole courant
-u la partie à droite

--> possibilité de remplacer cette écriture par (q, w_a_u)
-q l'etat courant
-w_a_u le ruban ou le symbole courant est souligné.

les transitions s'écrivent \delta(q_1, a) = (q_2, b, D|G)
-q_1 l'etat courant
-a le symbole lu
-q_2 l'etat après transition
-b le symbole lu après transition
-D|G droite ou gauche, la direction dans laquelle s'est déplacée la tete de lecture




_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Machine de Turing a ruban infini dans les deux sens
->Au lieu d'avoir un seul blanc à gauche, on a un nbre infini de blanc à gauche.

Pour simuler une machine à ruban infini dans les deux sens M, on utilise un ruban à deux pistes (on coupe en deux de manière arbitraire le ruban de M)

on ajoute du coup le symbole $ pour signifier que on est tout à gauche.
M':
|$|i|j|k|
| |h|g|f|

M' simule M (M1'), puis on redéplie au bout (Mf), et on vérifie que le comportement est le même

M1' qque soit q € K (de M), on a 2 copies des M1' :
	<q, 1> et <q, 2> --> M1' piste du bas
	  |
	  V
M1' piste du haut

Quand M1' prime s'arrête, la tete est placée sur un symbole caractérisé (par une barre horizontale?)

M = (K, \Sigma, \Theta, \delte, F)
M1'= (K_1', \Sigma, \Theta', \delta_1', F_1')
où K_1'= (K U {qf}) * {1, 2}, qf n'appartenant pas à K
et F_1' = {qf} * {1, 2}
Le symbole $ symbolise un changement de piste (virtuel)

(a) piste du haut
si \delta(q, a_1) = (p, b, D)	(M)
alors \delta_1'(<q, 1>, \alpha_1, \alpha_2) = (<p, 1>, (b,\alpha_2), D)

et si \delta(q, \alpha_1) = (p, b, G)
alors \delta_1'(<q, (\alpha_1, \alpha_2)) = (<q, 1>, (\alpha_1, \alpha_2)) = (<p, 1>, (b, \alpha_2), G)

(b) piste du bas
si \delta(q, \alpha_1) = (p, b, D)
alors \delta_1 '(<q, 2>, (\alpha_1, \alpha_2)) = (<p, 2>, (\alpha_1, b), G)

et si on remplace D par Gauche dans la ligne de M, alors on remplace G par Droite dans la ligne de M1'

(c)Changement de piste :
Quelque soit q € K
\delta_1 (<q, 1>, $) = (<q, 2>, $, D)
et inversement :
\delta_1'(<q, 2>, $) = (<q, 1>, $, D)
(on va toujurs vers la droite quand sort du $)

(d) extension à droite : si on lit un blanc (sur deux lignes), on remplace par deux blanc (un par ligne)
qque soit q € K
\delta_1'(<q, 1>, #) = (<q, 1>, (#, #), S)		S pour Stag
\delta_1'(<q, 2>, #) = (<q, 2>, (#, #), S)

(e) Mémorisation de la tête à la fin de M1'
qque soit q € F
\delta_1'(<q, A>, (\alpha_1, \alpha_2)) = (<qf, 1>, (\alpha_1^_, \alpha_2), S)
\delta_1'(<q, 2>, (\alpha_1, \alpha_2)) = (<qf, 2>, (\alpha_1, \alpha_2^_), S)

à l'arret de M1'

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Machine à copier à 2 rubans

(\sigma minuscule symbole courant pour les automates dessinés)

M' Simule M à k rubans
(standard)
M', 1 ruban, 2k pistes  ->k rubans
						->positions des k tetes
M' : (1) mettre $ à gauche
	 (2) diviser en 2k pistes
	 (3) #w# sur la 1ere piste
	 (4) positionner les tetes
	 (5) simulat° de M sur w
	 (6> 2k pistes -> 1 piste, place la tete, s'arrete

Possible de simuler une machine multi-dimensionnelle en linéarisant le plan.


Random Acces, Machine à Accès direct : accès à chaque case du ruban, àa la différence d'une machine de Turing à accès séquentiel
->Cette machine comporte un ruban T et ses n Cases T[0]. R_0, R_1, R_3, des registres, et K un compteur de programme, pour savoir ou on en est dans un programme.

Des instructions :
-read j -> placer ds le premier registre le contenu de la R_j eme case, R_j etant la valeur du j eme registre
-write j -> le contraire
-store j -> placer le contenu du j eme registre dans le premier registre
etc

Role particulier de R_0 : accumulateur

une machine à accès directe est un couple M  =(k, \Theta) avec k > 0 le nbre de registre, et \Theta une suite d'instruction.

On peut simuler une telle machine avec plusieurs rubans : 1 pour la mémoire, 1 pour le programme, 1 pour chaque registre. Le contenu de la mémoire est représenté par des paires de mots (adresse contenu)

Le programme indiqué en exemple dans le cours correspond à une multiplication de R_0 par R_1


Machine non déterministe : 
-> \Delta est ce coups ci un sous-ensemble de K x \Gamma x K x \Gamma x {G U D}.

On peut avoir deux sorties différentes pour une même entrée => accepteur dont le résultat intéressant est de savoir si la machine s'arrête ou pas.

On peut construitre pour M tte machine de Turing non déterministe une machine normale M' telle que pour tte chaine w€ \Sigma, si M s'aarête avec w en entréee, alors M' s'arrete sur w, et si M ne s'arret pas sur w, alors M' ne s'arrete pas non plus.

Simulation d'une machine M non déterministe à partir d'une machine C déterministe.

Soit C une cnfig de M. Il peut y avoir i config. C |-_M C_i. Soit d_C le nbre de config, C_i atteignable à partir de C
Le nbre de transistion de M (q, a, p, b, K)
d_C est fixé et bornjé d_C =< |K|.|\Gamma|.2
soit r le nbre de max de transistion applicable sur une config quelconque.
À partir de la config initiale (de départ) C = (q_0, _#_w#)
M définit au plus r config atteignable en 1 étape
C |-_M C_1,C |-_M C_2, etc.
Et de même pour C_1, et pour C_2, il y a r config atteignables.
À partir de C, on peut atteindre r² config en deux étapes.
M' simule M en vérifiant ttes les config atteignables en 1 étape
"													" en 2 étapes
"													" en k étapes
Si M s'arrete, donc nbre fini d'étapes, alors M' découvrira cet arret.
Si M ne s'arrete pas, M' n'arretera pas non plus la simulation 

M' machine a trois rubans : (<=> M à 1 ruban)
-Ruban (1) w, (chaine d'origine, n'est jamais modifié)
-Ruban (2) simulation de M, w recopié sur (2)
-Ruban (3) stocke la suite de config pour savoir ce qui a été fait et ce qu'il reste à faire, pour trouver la suite de config de M utilisé pour faire la config courante. On a donc sur ce ruban ##, puis une suite de mot appartenant à l'alphabet. {d_1, d_2, d_3, ...., d_r}

					 /-\
M' >$⁽²⁾D⁽^r⁾N M_1'<-   ->T
					 \-/

N copie w sur (2), après avoir effacé (2).
M_1' va simuler un calcule deterministe de M
Si M_1' s'arrête, alors
	-si le symbole courant du ruban (3) est # -> M s'est arrété en échec
	-Si le symbole courant du ruban (3) est non blanc, cela veut dire que M s'est arrété avec la config courante, donc M' s'arrête aussi.

T sur (3) à partir d'un ruban sur lequel il y a le mot #d# -> #d'# avec d' = d+1

Bon, j'ai pas réussi à prendre le dessin.... faudra que je trouve un moyen de les refaire avec Dia. ou Astah.
En gros, c'est un truc pour produire d' à partir de d sur le ruban (3)

N doit, dans un premier temps, effacer le ruban 2 pour s'assurer qu'il est vide. Étapes de l'opération
a- se déplace à droite sur (2) de la longueur du ruban (3) =< largeur (3)
b- effacement (2) G en mettant # jusqu'a $
c- N copie (1) sur (2)
d- positionne la tête (3) sur le 1 er symbole
encore un AEF dessiné. Et un gros. Il explique ce que l'on fait après l'étape d.

M_1' : même étape que M. Travaille sur (2) avec les infos (3)
-Si sur (3), on a # => simulation terminée
-Si sur (3), on a autre que #, M_1' simule une étape de M (a symbole a (2) et q etat à (2))avec la transition associée à q définie par (q, a, p_i, b_i, R).
M_1' entre ds l'etat p_i, écrit b_i sur (2) et déplace la tete de (2) selon R.

C'était écrit tout petit, il est probable qu'il y ai des fautes.

_____________________________________________________________________
Cours du 26/09

Les machines de Turing sont un formalisme assimilable à un lgge de programmation.
Les Machines de Turing Universelles restent des machines standards (pas de puissance supplémentaires).

--------------------
Grammaires

a^n b^n c^n, Langage Turing-décidable, qui s'arrete automatiquement, obligatoirement. Cela donne une réponse. (Différent de Turing-acceptable (qui inclut Turing-décidable)

Comme un langage L est engendré par une gramR génrale ssi il est récursivement énumérable, cela signifie qu'on peut simuler le fnctionnement de cette gramR avec une Machine de Turing.

SwS -> convention pour le point d'entrée. SwS =>_{G}^{*} ssi f(w) = v. C'est à dire que tte dérivation par G de SwS donne v.

ex : 
w = abba, f permute les a et les b.
SabbaS =>^{*} baab

Une fonction f : \Sigma * -> `Sigma * est grammaticalement calculable s'il existe une gramR la calculant.

Fonctions numériques :

pour une Machine de Turing, le ruban correspond aux actuelles chaines de caractères.
Une fct° passe de |N -> |N

3 fnct°s de base, 2 opérateurs sur les fnct°s de Base, et on mélange entre eux : on construit les fonctions primitives récursives, qui sont aussi la classe des fonctions calculables.

ex : f(n) = n² + 3n + 5 + 2^{n+1}
qque soit n, peut-être calulé.
-Composition d'opérations et de cnstntes
-cnstntes définies à partir de {0, succ n}
-puissance : construite à partir de produits m^n = {1 si n = 0, m.m si n différent de 0}
-Produit : construite à partir de sommes
-somme : construite à partir de succ.

Les entiers sont construits uniquement à partir de 0 et de succ.

Composition : 
p et k = 1
g : N -> N
h : N'-> N
f : N^{P} -> N f= goh
f(n1, ..., np) = g(h(n1, ..., np))

Récursivité :
-> définition avec un cas d'arret et un cas de récursivité.

id_{m, n} récupère le n eme élément d'un vecteur à m arguments.

-Addition
plus(n, O) = n
		   = id_{1,1}(n)
plus(n, M+1) = succ(plus(n, m))
			 = succ(id_{3, 3}(n, m, plus(n, m)))
			 |> Fonction h

-Multiplication :
mult N² -> N
mult(n, 0) = 0
mult(n, m+1) = plus(n, mult(n, m))

Possibilité d'écrire aussi mult(n, 0) = zéro_1(n)
= plus(id_{3, 1}(n, m, mult(n, m)), id_{3, 3}(n, m, mult(n, m)))

-Soustraction :
pred(0) = 0
pred(n + 1) = n
On obtiens la soustraction non négative avec le tilde ~ (résultat >= 0)
m ~ 0 = m
m~(n+1) = pred(m ~ n)

Prédicat primitif récursif :
-iszéro -> renvoi 1 si == 0, renvoie 0 sinon

Cela permet de déduire les opérateurs de comparaison (<, =<, =, diff, >, >=:
-n =< m = iszéro(n ~ m)

Opérateur booléens ( et ^, négation !, ou v)
- !n = 1 ~ n
- n^m = 1 ~ iszéro(n * m)
- n v m = 1 ~ iszéro(n+ m)

Définition par cas :

p prédicat  ->1
			->0
f primitive récursive si g1, g2 et p le sont
f(x_1, ..., x_n) = p(x_1, ..., x_n) * g1(x_1, ..., x_n) + (1~p(x_1, ..., x_n)) * g2(x_1, ..., x_n)

Modulo :
mod(0, n) = 0
mod(m+ 1, n) = 0 si mod(m, n) = pred(n), mod(m, n)+ 1 sinon.

div(0, n) = 0
div(m+1, n) = div(m, n) si mod(m+1, n) > 0, div(m, n) + 1 sinon.

\Somme :
sum_f(n)= f(0) + ... + f(n)
		= sum_f(0) = f(0) ou sum_f(n+1) = sum_f(n, f(n+1))

_________________________________________________________________
Cours du 03/10

Essayer de récupérer le cours du 02/10, finissant sur les paradoxes, et le problème de l'arrêt

Soit halt(P, X) une machine prenant en entrée un problème P et une entrée X, et renvoyant vrai  si P s'arrête avec X, Faux sinon.
Nous ne sommes pas en mesure de dire si P va s'arrêter sans tester P.

Récursivement énumérable : catégorie supérieur, il n'y a rien au dessus.

Preuve par l'absurde que H (voir pdf, pag 108) n'est pas récursif

Supposons H récursif :
->tt lg énumérable serait récursif
->SU décidant H
SU("M" "w") = OUI si M s'arrête
			  NON sinon
Soit L un langage récursivement énumérable tel que M' pour tt w € L -> M' s'arrête avec w
->MT la machine de Turing qui associe w ->SU("M" "w") décidant L
	w € L ssi SU("M" "w") s'arrête -> YES
	w n'appartient pas à L ssi SU("M" "w") s'arrête -> NO
-> M0 : code w, code M', éxécute SU avec "M"
Or H non récursif (donc SU n'existe pas)
Sinon, à partir de Su, on pourrait construiree SU' s'arrêtant uniquement sur les entrées "M" "M" (haltbis)
dupliquer
"M" -> SU -> oui "M" s'arrête avec "M"			-> Boucle
		  -> non "M" ne s'arrête pas avec "M"	-> Arret

Q SU' s'arrête t-elle avec "SU'"?
	-> Oui => SU' ne s'arrête pas
	-> Non => SU' s'arrete

SU' s'arrête sur "SU'" "SU'" ssi ne s'arrête pas sur "SU'" "SU'"
-> Ce qui est absurde.

Il existe des langages récursivement énumérable qui ne sont pas récursifs.


H1 = {"M"|M est une MT s'arrêtant sur "M"}
\barre{H1} = {w € \Sigma_u^*
w n'est pas un codage de MT
w code de MT ne s'arrêtant pas sur "us"}

H1 recursivement énumérable
\barre{H1} non récursivement énumérable

réduction => évolution, transformation (ce n'est pas une simplification)
Soit un probleme indécidable => ce probleme reste indécidable
	ou
H non récursif => rec enum \diff récursif
Pas de bijection entre L_1 et L_2
\rho S'il existe une réduction entre L_1 et L_2, alors il existe une réduction (différente) entre L2 et L1

mais si \rho(L_1) -> L_2
alors	\rho(\barre{L_1}) -> \barre{L_2}

(ou)
si \rho(L_2) -> L_1
alors \rho(\barre{L_2}) -> \barre{L_1}

L non décidable, on choisit L' non décidable et \rho : L' -> L

Preuve par l'absurde :
Soit un théorème Si A alors B
->hypo : Si A alors \barre{B}

On choisit L_1 non récursif (pas de machine M_1 décidant L_1)
Supposons L_2 récursif M_2 une MT décidant L_2
Soit R une MT calculant \rho réduisant L_1 à L_2
w € L_1 <=> \rho(w) € L_2
Donc R M_2 décide L_1

w € L_1 -> \rho(w) € L_2 => RM_2(w) -> y
w !€ L_1 => \rho(w) !€ L_2 => RM_2(w) -> N

(a) indécidabilité du probleme de l'arrêt <=> M = {"M" "w" | M s'arrête sur w} non récursif
(b) L = {"M"| M s'arrête sur e}
Donc on cherche une réduction de H vers L
Soient M et w = a_1 ... a_n
-> M_w fonctionne comme L lorsque l'entrée de M est vide
M_w = >D a_1 D a_2 ..... D a_n

La fct° "\Sigma" -> "MT"
		"a_1 ... a_n" -> "D a_1 D a_2....D a_n"
		-> est récursive
H à L réécursive => H indécidable donc L indécidable

(c)
M': -efface le ruban d'entrée
	-simule M
M' s'arrête sur certaines entrées <=> M' s'arrête sur une certaine entrée <=> M' s'arrête sur ttes ses entrées <=> M' s'arrete sur e (le mot vide)
L = { "M" | M s'arrete sur le mot vide e}
|
|\rho '
|
V
L' {"M" | M s'errête sur certaines entrées}
\rho' "M" -> "M"
récursive
=> L' non récursif

GramR : problémes indécidables
(a) M -> G tel que L(G) = L(M)
w €L(G) ssi M s'arrete sur w
Il faudrait faire un codage pour passer d'une MT ver une GramR
M --\rho-->G avec \rho récursif


G(génrale) génère ø -> G (algébrique) génère \Sigma*

Il y a stabilité de la classe des langages récursif par compléments :

On a L récursif => L récursivement énumérable
Donc le complément de L
\barre{L} récursif => \barre{L} récursivement énumérable
<= L et \barre{L} réc enum.

M_1 accepte L_1
M_2 accepte \barre{L_1}

M à deux rubans
1) copies w sur (1) et (2)
2) 1 ere étape de M_1 sur (1)
				  M_2 sur (2)
3) si on arrive ds un état d'arrêt de M_1 ou de M_2
-> M_1 s'arrête  : y (M_1)
				   N (M_2)


____________________________________________________
Cours du 09/10

L accepté par M ==> M', Turing énumère L
pour i de 1 à l'infini
	M' génère des mots de longueur i sur ∑*
	pour chaque mot M simule i de M
	ssi M s'arrêtes avant i étapes
		-> ajout du mot au dico s'il n'y ai pas déjà.


L Turing énuméré par une Machine M -> construire M' qui accepte L
	-M' sauvegarde si entrée sur (2)
	-simule M sur (1), à chaque passage par q, on compare (1) et (2). 
		Si égalité, alors on s'arrête (si les mots sont égaux), 
		sinon, on continue la simulation

L décidé par M, on construit M'
	M' énumère les mots de ∑ dans l'ordre lexicographique (alphabétique)
	après avoir généré w_i, teste sur M
		-> y => affiche et on continue
		-> N =>...

L lexicographiquent énmurable par M
	->M' -> sauvegarde w
	lance l'énumération de L jusqu'a
	-trouver w, alors OK (y)
	-dépasser w dans l'ordre lexicographique (N)
	-arrêt de M avant, fin de l'énumération


Théorème de Rice
Preuve :
Supposons que ø ∈ C (sinon on par de \barre{c}
Soit L ∈ C, M accepte L
->M' pour w M lance U avec "M"
			si U s'errête, M' lance M avec w
en fct° de M, M' ne s'arrête pas ∀ w
	-s'arrête si w ∈ L
Comme L recursivement énumrable, on ne sait pas décidé si U("M") s'arrête
-> on ne sait pas décider si M' accepte ø => !∈ C
							 M' n'accepte pas ø => ∈ C


---------------------------------------------------------
Complexité : 

O( )
\Omega( )
(H)( )

Pour l'exemple de la géométrie tortue, on est en O(2^n)

O(n!) ≃ O(n^n)
n! ≃ \frac{n}{2} \sqrt{2\Pi n}
James STIRLING (1692 - 1770)

Classe Polynomiale

La classe des langages polynomialement décidable est noté P

Soit L polynomialement décidé par M
\complémentaire'L) par \barre{M} qui correspond à M dans lequel on a juste inversé Y et N (Yes and No, les arrêts)

Cela n'a pas d'influence sur le polynome qui borne M
\barre{M} polynomialement bornée, donc \barre{L} ∈ P

preuve : 

Soit E un langage | E = {"M" "w" M accepte w après au plus 2^{|w|} étapes}

E n'appartie pas à P. Supposons donc que E ∈ P =>
E_1 = {"M" M accepte "M" après au plus 2^{|"M"|} étapes}

-> E_1 ∈ P, \barre{E_1} ∈ P
-> ∃ M* décident \barre{E_1}, M* polynomialement bornée
∃ p ∀ w ∈ ∑*, M* s'arrête après au plus p(|w|) étapes

O ∃ n_0 | ∀ n > n_0, 2^{(n)} > p(n)
On suppose que |"M"| ≥ n_0
	(au besoin, on étudie "M" avec des états inacessibles)

Q M* accepte "M"?
OUI -> "M" * ∈ \barre{E_1} => M* n'accepte pas "M" en en moins de 2^{|M*|} étapes
	contredit M* polynome borné par p et p(n) < 2^n
NON -> M* accepte "M"*
	M* !∈ \barre{E_1} en au plus 2^{|"M"*|} étapes
	M* ∈E_1
	Mais comme L* décide \barre{E_1} M* ne peut accepter "M*" contradication


Codage de graphe sommets : entier
				 arrêtes : couples d'entier
				 ∑ = {0, 1, (, ), ,}

R = {"G", "i"  | ∃ cemin de v_i à v_j ds G}
R ∈ P similaire au problème de l'arrêt


____________________________________________
Cours du 10/10

Graphes Eulériens

Euleriens -> a) ∀ u, v ∈ V, si u et v ne sont pas isolés
			 b) degré interieur = degré extérieur
	CNS 	a) fermeture réflexive-transitive (polynomial)
			b) linéaire


Classe NP -> Non déterministe Polynomiale

L ∈ NP L décidé par M non déterministe polynomialement bornée
1) M s'arrête toujours, ∀ w, en un nbre d'étape borné par p(|w|)
2) M s'arrête et rend Y ou N
	w accepté s'il existe au moins un chemin (une suite de calcul) qui aboutisse à Y
3) On parcours l'arbre jusqu'a trouvé un YES, sinon on continue à parcourir l'arbre. La profondeur peut estimer le temps


MT à 2 rubans, F sur (1)
1) on va compter le nbre de variable de F et vérifier que c'est bien une Forme Normale Conjonctive
2) écrire sur (2) autant de I que de variables
3) changer de manière non déterministe chaque I -> T
												\-> ⊥
MT à \frac{1}{2} état

Puis une machine de turing que j'ai pas pu dessiner, à récupérer
4) Interpréter la famille devaleur de chaque variable et sur (2)
-> VRAI (1) -> T => arrêt Y -> f satisfiable
-> FAUX (1) -> ⊥ => arrêt N -> on continue sur (2)
	polynomial


Problème du voyageur de commerce (faible)

preuve -  de manière non déterministe tous les 
		-tester de manière det chaque 
			-> SB ou pas

La classe EXP (exponentielle)
On prend une MT déterministe exponentiellement bornée.


preuve M une MT non déterministe polynomialement bornée par p
L décidé par M
on construit M' déterministe exponentiellement borné qui décide L
	preuve d'équivalence det/ non deterministe

On note r le degré de non déterministe
		|->fixé, dépend de M
		=nbre max de quintuplet de \Delta qui se partagent les 2 premiers composants
		=nbre max de fils dans l'arbre de calcul
M' simule M sur w: 
	-tous les calculs de longueur 1 (au maximum r)
	-"							" 2 (au max r²)
	-.....
	-tous les calculs de longueur p(|w|) (au max r^{p(|w|)})
Simule un calcul de longueur k se fait en O(k)
-copier l'entrée
-produire la chaine suivante sur {1, 2, ..., r}
-Simuler M
∑_{r=1}^{p(n) +1} r^k = \frac{r(r^{p(n) + 1} -1)}{r - 1}  ≤ (r+1)^{p(n) + 1} = 2 ^{log_{p+1} p(n) + 1}
							NP											EXP
on a P ⊂ NP ⊂ EXP
P = NP ? on ne sait pas
NP = EXP ? on ne sait pas
P ⊂ EXP
P ≠ EXP


Notion de certificat :
pbs d'existence : -produire une situation
				  -test -> réussite => résolu l'existence
						   échec à tous => n'existe pas
Quand les tests sont passé avec succès, on appelle cela un certificat ou témoin
->Il faut que ce témoin aie une longueur polynomiale par rapport à w
->....qqch

preuve pour page 136
L = { x, y | y est un certificat pour x}
L' = {entrée; certificat pour l'entrée | l'entrée w ∈ ∑*}
si l'entrée ∈ L, ∃ un certificat
Si l' existe, alors ∃ MT polynomialement bornée non déterministe qui décide L en testant tous les certificats
Si L ∈ NP, alors ∃ M decidant L, polynomialement bornée

------------------------------------
NP complet (NPC)

Les pbs NPC ont une solution polynomiale uniquement si P = NP preuve
Pour montrer que les pbs NPC n'ont pas de solution polynomiale, il suffit de montrer que P ≠ NP

SAT, VC, ham, on a pas trouvé de solution P
			si une solution P existait, on l'aurait trouvé

Supposons que P ≠ NP, si on arrive à trouver un pb NP complet, alors on prouve qu'il n'y a pas de solution polynomiale

Analogie avec l'existence

\tho réduit le pb A au pb B (trsfrmt° d'unpb en un autre)
\tho : A -> B
	   Pb ⇐ Pb
	   \barre{Pb} ⇒ \barre{Pb}
B ∈ P => A ∈ P
B !∈ => A !∈ P

instance de A
un Algo pour A
