Cours de Calucl et Complexité

Cours du 11/09/2014

JFLAP : plateforme de test d'automate, de gramR, etc (cg Google).


Classifier des langages (rationnels, algébriques et récursifs), des automates associés et des gramR les engendrant.
Le décidabilité et la complexité en dépendent.


Automate finis déterministes :
-Simulation d'une machine très simple :
	-mémorisation d'un état
	-programme sous forme de graphe étiquetté indiquant les transitions possibles
-Cette machine lit un mot en entrée
-ce mot décrit une suite d'action et progresse d'état en état, jusqu'a lecture du mot.
-Et dit s'il fait partir d'un langage donné, après avoir atteint un état final.

Un automate déterministe fini est le quintuplet :
-K ensemble fini non vide d'état
-Epsilon : alphabet (ensemble non vide de lettres)
-delta : fonction de transistion K x Epsilon -> K
	ð(q, sigma) =q'


Machines de Turing :
Une machine de Turing est constituée 
-d'un contrôle (ensemble finis d'état et de transitions
-d'un ruban infini à droite
-d'une tête sur le riban qui peut lire et écrire et qui peut se déplacer dans les deux directions d'un caractère à la fois.

A chque étape, en fonction de l'état courant et du symbole courant, la machine :
-change d'état,
-écrit un symbole à l'emplacement courant,
-déplace le tête d'une position à droite ou à gauche.

Initialement la machine est dans un état initial (sic)

Le symbole qui désigne le blanc (#) n'appartient pas à l'alphabet, mais peut être lu.
Pour simplifier l'écriture des configurations, on introduit une notation abbréviée sous la forme : (état courant, contenu du ruban où le symbole courant est souligné)

Ainsi, la config (q, e, a, bcdf) s'écrit (q, _a_ bcdf)  oui, le a est souligné (je peut pas le faire en ascii).

/!\ Je passe en notation latex pour la suite

Soit une machine de Turinf M=(K, \Sigma, \Gamma, \delta, q_0) et deux configurations (q_1, w_1, a_1, u_1) et (q_2, w_2, a_2, u_2). On dit que (q_1, w_1, a_1, u_1) conduit à (q_2, w_2, a_2, u_2) en une étape ssi voir démonstration.
On note cela (q_1, w_1, a_1, u_1) \Tcouché_M (q_2, w_2, a_2, u_2)

\delta : une fonction partielle : pour chaque doublet (etat, caractère) de la fonction, on a une ou zéro image (etat, caractère, direction D|G). Si elle n'était pas partielle, cela signifierai que pour chaque duet (etat, caractère), il y aurait un traitement, et la machine ne s'arreterait jamais.

Une machine augmentée avec des états finaux devient un sextuplet M = (K, \Sigma, \Gamma, \delta, q_0, F). On y rajoute F, l'ensemble de états finaux.
Contrairement aux AEF, il n'est pas obligatoire de lire entièrement le ruban. Quand la machine s'arrete, on regarde lé réponse.

Pour savoir si un mot est validé, on regarde dans quel état on est quand le symbole s'arrete.

Le langage accepté par une machine de Turing est Turing-Acceptable ou récursivement énumérable.

Si la machine de Turing s'arrête sur toutes les entrées possibles (c'est à dire pour tous les mots w, w \appartien L ou \n'appartient pas L), alors le langage est dit Turing-décidable ou récursif. On dit que M semi-décide L, ou encore M accepte L.

Les fonctions pouvant être calculés par une machine de Turing sont dites Turing-calculables.

Les fonctions de N dans N. f(I^n) = I^f(n) pour tout n \appartenant à N

Pour des machines + complexes, on utilise des machines de Turing comme des modules ou des sous-routines.

Exemple de combinaison de machine de Turing.
Les machines qui remplacent un symbole.
·Une machine pour chaque symbole de l'alphabet \Gamma.

